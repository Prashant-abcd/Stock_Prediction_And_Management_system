
1 Stock Table
Stores information about different stocks available in the market.

sql
Copy
Edit
CREATE TABLE Stock (
    StockID INT PRIMARY KEY,          -- Unique ID for each stock
    StockName VARCHAR(100) NOT NULL,  -- Full name of the stock
    StockSymbol VARCHAR(10) UNIQUE NOT NULL, -- Ticker symbol (e.g., AAPL)
    Sector VARCHAR(50) NOT NULL       -- Industry sector (e.g., Technology, Finance)
);
ðŸ”¹ Explanation:
StockID (Primary Key) â†’ Ensures each stock has a unique identifier.
StockSymbol (Unique Constraint) â†’ Ensures no two stocks have the same ticker symbol.
Data Integrity â†’ NOT NULL constraints prevent empty values.






2 PriceData Table
Stores daily stock price information retrieved from financial APIs (e.g., Yahoo Finance).

CREATE TABLE PriceData (
    StockID INT NOT NULL,             -- Links to Stock table (Foreign Key)
    TradeDate DATE NOT NULL,          -- The date when the price was recorded
    OpenPrice DECIMAL(10,2) NOT NULL, -- Opening stock price of the day
    HighPrice DECIMAL(10,2) NOT NULL, -- Highest price recorded during the day
    LowPrice DECIMAL(10,2) NOT NULL,  -- Lowest price recorded during the day
    ClosePrice DECIMAL(10,2) NOT NULL,-- Closing stock price of the day
    AdjClosePrice DECIMAL(10,2) NOT NULL, -- Adjusted closing price (accounts for splits & dividends)
    Volume NUMBER(20) NOT NULL,       -- Number of shares traded
    PRIMARY KEY (StockID, TradeDate), -- Each stock can have only one entry per date
    FOREIGN KEY (StockID) REFERENCES Stock(StockID) ON DELETE CASCADE
);
ðŸ”¹ Explanation:
TradeDate instead of Date â†’ Avoids conflicts with Oracle's reserved keyword.
StockID (Foreign Key) â†’ Links to Stock table, ensuring valid stock reference.
ON DELETE CASCADE â†’ If a stock is deleted, its price history is also deleted.
Composite Primary Key (StockID, TradeDate) â†’ Prevents duplicate entries for the same stock on the same date.







3 Users Table
Stores registered users who can track and analyze stock data.

SQL> CREATE TABLE Users (
  2      UserID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,  -- Auto-incrementing ID
  3      Username VARCHAR(50) UNIQUE NOT NULL,
  4      PasswordHash VARCHAR(255) NOT NULL,
  5      Email VARCHAR(100) UNIQUE NOT NULL,
  6      Role VARCHAR(20) CHECK (Role IN ('Admin', 'User')) NOT NULL
  7  );
ðŸ”¹ Explanation:
UserID (Primary Key) â†’ Ensures each user is uniquely identified.
Unique Constraints on Username & Email â†’ Prevents duplicate accounts.
CHECK Constraint on Role â†’ Allows only 'Admin' or 'User'.



transaction table 
SQL> CREATE TABLE Transaction (
  2      StockID INT,
  3      UserID INT,
  4      TransactionDate DATE DEFAULT SYSDATE, -- Stores only the date of the transaction
  5      TransactionType VARCHAR(5) CHECK (TransactionType IN ('Buy', 'Sell')),
  6      TransactionAmount NUMBER NOT NULL,
  7      PRIMARY KEY (StockID, UserID, TransactionDate),
  8      FOREIGN KEY (StockID) REFERENCES Stock(StockID) ON DELETE CASCADE,
  9      FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
 10  );



4 Prediction Table
Stores stock price predictions generated by the machine learning model.


CREATE TABLE Prediction (
    PredictionID INT PRIMARY KEY,    -- Unique identifier for each prediction entry
    StockID INT NOT NULL,            -- Foreign key linking to Stock table
    PredictedDate DATE NOT NULL,     -- The future date for which the prediction is made
    PredictedClosePrice DECIMAL(10,2) NOT NULL, -- Predicted stock closing price
    FOREIGN KEY (StockID) REFERENCES Stock(StockID) ON DELETE CASCADE
);
ðŸ”¹ Explanation:
PredictionID (Primary Key) â†’ Uniquely identifies each prediction.
StockID (Foreign Key) â†’ Ensures predictions are tied to valid stocks.
PredictedClosePrice â†’ The forecasted stock price.


6 Watchlist Table
Stores stocks that users have added to their watchlist for tracking.

CREATE TABLE Watchlist (
    WatchlistID INT PRIMARY KEY,     -- Unique ID for watchlist entry
    UserID INT NOT NULL,             -- Links to Users table
    StockID INT NOT NULL,            -- Links to Stock table
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- When the stock was added
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (StockID) REFERENCES Stock(StockID) ON DELETE CASCADE
);
ðŸ”¹ Explanation:
UserID (Foreign Key) â†’ Links each watchlist entry to a valid user.
StockID (Foreign Key) â†’ Links each watchlist entry to a valid stock.
ON DELETE CASCADE â†’ If a stock/user is deleted, related watchlist entries are also removed.







7 MarketNews Table
Stores stock-related financial news articles.


CREATE TABLE MarketNews (
    NewsID INT PRIMARY KEY,          -- Unique ID for each news article
    Title VARCHAR(255) NOT NULL,     -- News title
    Content CLOB NOT NULL,           -- Full article content (CLOB for large text)
    Source VARCHAR(100) NOT NULL,    -- News source (e.g., Reuters, Bloomberg)
    PublishDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- When the article was published
);
ðŸ”¹ Explanation:
NewsID (Primary Key) â†’ Ensures uniqueness of each news article.
Content (CLOB instead of TEXT) â†’ Stores large news content.
PublishDate â†’ Defaults to current timestamp.







8 Alert Table
Stores price alerts set by users for specific stocks.


CREATE TABLE Alert (
    AlertID INT PRIMARY KEY,         -- Unique alert ID
    UserID INT NOT NULL,             -- Links to Users table
    StockID INT NOT NULL,            -- Links to Stock table
    AlertType VARCHAR(20) CHECK (AlertType IN ('Price Above', 'Price Below')) NOT NULL, -- Type of alert
    AlertValue DECIMAL(10,2) NOT NULL, -- Price trigger value
    IsActive NUMBER(1) DEFAULT 1,    -- 1 for active, 0 for inactive
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (StockID) REFERENCES Stock(StockID) ON DELETE CASCADE
);
ðŸ”¹ Explanation:
AlertType (CHECK Constraint) â†’ Ensures only 'Price Above' or 'Price Below'.
IsActive (NUMBER(1)) â†’ 1 for active, 0 for inactive alerts.






SQL> ALTER TABLE stock modify stockname varchar(35);

Table altered.

SQL> ALTER TABLE stock modify sector varchar(25);

Table altered.
SQL> SET PAGESIZE 50;
SQL> SELECT * from stock;

   STOCKID STOCKNAME                           STOCKSYMBO SECTOR
---------- ----------------------------------- ---------- -------------------------
         1 Apple Inc.                          AAPL       Technology
         2 Microsoft Corporation               MSFT       Technology
         3 Amazon.com, Inc.                    AMZN       Consumer Discretionary
         4 NVIDIA Corporation                  NVDA       Technology
         5 Tesla, Inc.                         TSLA       Consumer Discretionary
         6 Alphabet Inc. Google - Class A      GOOGL      Technology
         7 Alphabet Inc. Google - Class C      GOOG       Technology
         8 Meta Platforms, Inc. Facebook       META       Technology
         9 Berkshire Hathaway Inc. Class B     BRK.B      Finance
        10 Visa Inc.                           V          Finance
        11 Johnson and Johnson                 JNJ        Healthcare
        12 Walmart Inc.                        WMT        Consumer Staples
        13 Exxon Mobil Corporation             XOM        Energy
        14 Procter and Gamble Co.              PG         Consumer Staples
        15 UnitedHealth Group Incorporated     UNH        Healthcare
        16 JPMorgan Chase and Co.              JPM        Finance
        17 Samsung Electronics Co. Ltd.        005930.KQ  Technology
        18 Toyota Motor Corporation            TM         Consumer Discretionary
        19 Nestle S.A.                         NSRGY      Consumer Staples
        20 Coca-Cola Company                   KO         Consumer Staples

20 rows selected.






************************************************************************************************************************8




SQL> -- Add a new column with the desired precision
SQL> ALTER TABLE PriceData ADD Volume_New NUMBER(12);

Table altered.


SQL> -- Copy the data from the old column to the new column
SQL> UPDATE PriceData SET Volume_New = Volume;

5 rows updated.


SQL> -- Drop the old column
SQL> ALTER TABLE PriceData DROP COLUMN Volume;

Table altered.


SQL> -- Rename the new column to the original name
SQL> ALTER TABLE PriceData RENAME COLUMN Volume_New TO Volume;

Table altered.

SQL> select* from pricedata;

   STOCKID TRADEDATE  OPENPRICE  HIGHPRICE   LOWPRICE CLOSEPRICE ADJCLOSEPRICE   VOLUME
---------- --------- ---------- ---------- ---------- ---------- ------------- --------
         1 04-MAR-23        150        155        148        153           153  1000000
         1 05-MAR-23        153        157        152        155           155  1200000
         1 06-MAR-23        155        160        154        159           159  1100000
         1 07-MAR-23        159        162        158        161           161  1300000
         1 08-MAR-23        161        165        160        164           164  1400000






*************************************************************************************************************88








SQL> Alter table users modify username varchar(15);

Table altered.
SQL> alter table users modify passwordhash varchar(15);

Table altered.

SQL> alter table users modify email varchar(35);

Table altered.
SQL> INSERT INTO Users VALUES(1, 'johndoe', 'hashed', 'johndoe@example.com', 'User');

1 row created.

SQL> select* from users;

    USERID USERNAME        PASSWORDHASH    EMAIL                               ROLE
---------- --------------- --------------- ----------------------------------- --------------------
         1 johndoe         hashed          johndoe@example.com                 User


************************************************************************************************************





